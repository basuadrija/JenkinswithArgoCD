pipeline {
    agent any

    environment {
        //SONAR_TOKEN = credentials('sonarqube')
        DOCKERHUB_USERNAME = "adrijatina1993"
        SONAR_URL = "http://52.66.248.165:9000/"
        APP_NAME = "clinic09"
        IMAGE_TAG = "${BUILD_NUMBER}"
        IMAGE_NAME = "${DOCKERHUB_USERNAME}" + "/" + "${APP_NAME}"
    }

    stages {

        stage('Build and Test') {

            steps {

                echo 'Building jar'

                script{
                    sh 'cd java-argocd-sonarqube/ci && mvn clean install -DskipTests'
                }

               
            }
        }


        stage('Static Code Analysis') {

            steps {

                withCredentials([string(credentialsId: 'sonarqubewithjenkins', variable: 'SONAR_AUTH_TOKEN')]) {

                    sh 'cd java-argocd-sonarqube/ci && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                }
            }
        }

        stage('Stage Artifacts to Jfrog') {
                steps {
                    script {
                        def server = Artifactory.server 'my-jfrog2' 
                        def uploadSpec = """{   
                                        "files": [{
                                        "pattern": "/var/lib/jenkins/workspace/jenkinsautomation/java-argocd-sonarqube/ci/target/demo-0.0.1-SNAPSHOT.war",
                                        "target": "my-jfrog2",
                                        "recursive": "false" 
                                         }]
                                    }"""
                         server.upload(uploadSpec)
                    }
                }
        }

    //    stage ('Build docker image') {

    //     steps {  
    //             echo 'Building docker image' 
    //             script {
    //                         docker_image = docker.build "${IMAGE_NAME}"
    //             }
    //     }
    //    }
    }
}



